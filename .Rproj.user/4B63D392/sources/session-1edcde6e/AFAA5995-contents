
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Main Class Definition (Base Class)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Define the main class "insideflow" with a constant sampleName and shared slots
# Now it also contains a list of clustering, dimensionality reduction, and batch correction objects
setClass("insideflow",
         slots = list(
           sampleName = "character",    # Constant sample name
           inputCSV = "matrix",
           parameterNames = "data.frame",
           flowFrameFJ = "ANY",         # Could be flowFrame from flowCore package
           clusteringList = "list",     # List of ClusteringClass objects
           dimReductionList = "list",   # List of DimRedClass objects
           batchCorrectionList = "list" # List of BatchCorrectionClass objects
         )
)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Subclass Definitions (Inheriting from insideflow)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# ClusteringClass inherits from insideflow and adds a unique runID and clustering-specific slots
setClass("ClusteringClass",
         contains = "insideflow",
         slots = list(
           runID = "character",        # Unique runID for each clustering object
           method = "character",       # Clustering method used
           result = "matrix"           # Resulting matrix from clustering
         )
)

# DimRedClass inherits from insideflow and adds a unique runID and dimensionality reduction-specific slots
setClass("DimRedClass",
         contains = "insideflow",
         slots = list(
           runID = "character",        # Unique runID for each dimensional reduction object
           method = "character",       # Dimensionality reduction method used
           reducedData = "matrix"      # Resulting matrix from dimensionality reduction
         )
)

# BatchCorrectionClass inherits from insideflow and adds a unique runID and batch correction-specific slots
setClass("BatchCorrectionClass",
         contains = "insideflow",
         slots = list(
           runID = "character",        # Unique runID for each batch correction object
           method = "character",       # Batch correction method used
           correctedData = "matrix"    # Resulting matrix from batch correction
         )
)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Example instantiation of the main insideflow object and task-specific components
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
library(data.table)
library(flowCore)
library(FlowSOM)
library(dplyr)
library(FastPG)
library(ggplot2)

# Step 1. Instantiate the main CytoCrunch object, now containing a list of ClusteringClass objects
flowData <- new("CytoCrunch",
                sampleName = "Blood3k",
                inputCSVFilePath = "./extData/Blood3k.ExtNode.csv"
)
flowData2 <- new("CytoCrunch",
                sampleName = "LymphNode3k",
                inputCSVFilePath = "./extData/LymphNode3k.ExtNode.csv"
)
# Step 2, load data from .csv
# flowData <- loadFlowJoCSV(flowData, "./extData/CD3+.ExtNode.csv", eventNumber = "EventNumberDP")

# Step 3. Perform Clustering with FlowSOM
flowData <- performClustering(flowData, runID = "SLK8", method = "FlowSOM", k =12)

flowData2 <- performClustering(flowData2, runID = "SLK9", method = "FlowSOM", k =15)

# Step 4. perform a new embedding with tsne to test functionality
flowData <- performEmbedding(flowData, runID = "SLK8", method = "tsne", fjSeed = 123,
                             fjXdim = 10, fjYdim = 10, fjRLEN = 15, fjK = 10, fjAdjust = 0,
                             fjSmooth = 0, fjMapSize = 2000)

# Step 4. Perform Dimensionality Reduction with embedsom (tsne, umap, embedsom, supervised)
flowData2 <- performEmbedding(flowData2, runID = "SLK9", method = "umap", fjSeed = 23,
                              fjXdim = 10, fjYdim = 10, fjRLEN = 15, fjK = 10, fjAdjust = 0,
                              fjSmooth = 0, fjUmap.Dist = 0.5, fjMapSize = 2000)

plotObj2 <- plotEmbeddingWithClusters(flowData2, embeddingRunID = "SLK9", clusteringRunID = "SLK9")
# print(plotObj2)


# Test now with multiple objects to create a merged object and plot results
mergedCC3s <- mergeCytoCrunchObjects(list(flowData, flowData2), c("SLK8", "SLK9"))

library(ggplot2)
library(gridExtra)  # For arranging multiple plots

plotMergedEmbeddings(mergedCC3s)

# Function to find a clustering object by runID
getClusteringByRunID <- function(flowData, runID) {
  matchObj <- lapply(flowData@clusteringList, function(x) if (x@runID == runID) return(x))
  matchObj <- Filter(Negate(is.null), matchObj)

  if (length(matchObj) > 0) {
    return(matchObj[[1]])  # Return the first match (assuming unique runID)
  } else {
    stop("No clustering object found with the given runID.")
  }
}

# Example usage
clusteringObj <- getClusteringByRunID(flowData, "SLK9")
print(clusteringObj)

plotClassObj <- createPlotClass(runID = "SLK8", plotType = "ggplot", plotObj = ggplot(embedding) +
                                  geom_point())
plotObj <- createPlotClass(runID = "SLK6", )
plotObj <- new("PlotClass")
